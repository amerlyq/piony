> Awesome Python frameworks, libraries and software list
	https://github.com/vinta/awesome-python
> Awesome framework http://ipython.org/

hack with import (for pylint to ignore __init__.py unused imports)
	https://github.com/celery/kombu/blob/master/kombu/__init__.py#L24-L35
	https://github.com/mitsuhiko/werkzeug/blob/master/werkzeug/__init__.py

	Version
		from collections import namedtuple
		version_info_t = namedtuple('version_info_t',
			('major', 'minor', 'micro', 'releaselevel', 'serial'))
		VERSION = version_info_t(3, 1, 0, 'a1', '')
		__version__ = '{0.major}.{0.minor}.{0.micro}{0.releaselevel}'.format(VERSION)

	Скрипт запускать каждый раз ужасно лениво, поэтому небольшая оболочка на
	inotifywait стала запускать тесты и проверки после каждого сохранения:
		while true; do
		inotifywait -e modify project/*.py -qq; clear
		./do_tests
		done

See
	http://pyqt.sourceforge.net/Docs/PyQt4/qmouseevent.html

Consider caching of calculated results
	: if (d->isDirty() || rect != geometry()) {
	: 	QRect cr = alignment() ? alignmentRect(rect) : rect;
	: 	d->distribute(cr, horizontalSpacing(), verticalSpacing());
	: 	QLayout::setGeometry(rect);
	: }

Size distribute
	qgridlayout.cpp:917
		void QGridLayoutPrivate::distribute(QRect r, int hSpacing, int vSpacing)

if os.access(os.path.dirname(s), os.R_OK):
	print("Wrong permissions")

Create layout
: see when creating nested layouts
	http://doc.qt.io/qt-4.8/layout.html
: next to it is styles -- is interesting too

	: void QGridLayout::addLayout(QLayout *layout, int row, int column, Qt::Alignment alignment)
	: {
	: 	Q_D(QGridLayout);
	: 	if (!adoptLayout(layout))
	: 		return;
	: 	QGridBox *b = new QGridBox(layout);
	: 	b->setAlignment(alignment);
	: 	d->add(b, row, column);
	: }

	: void QGridLayoutPrivate::add(QGridBox *box, int row, int col)
	: {
	: 	expand(row + 1, col + 1);
	: 	box->row = box->torow = row;
	: 	box->col = box->tocol = col;
	: 	things.append(box);
	: 	setDirty();
	: 	setNextPosAfter(row, col);
	: }

when creating grid:
	~/hub/qt/src/gui/kernel/qgridlayout.cpp

New widget:
	Reimplement QWidget::sizeHint() to return the preferred size of the widget.
	Reimplement QWidget::minimumSizeHint() to return the smallest size the widget can have.
	Call QWidget::setSizePolicy() to specify the space requirements of the widget.
	Call QWidget::updateGeometry() whenever the size hint, minimum size hint
	or size policy changes. This will cause a layout recalculation. Multiple
	consecutive calls to QWidget::updateGeometry() will only cause one layout
	recalculation.

hide -- will it be useful?
	To remove a widget from a layout, call removeWidget(). Calling
	QWidget::hide() on a widget also effectively removes the widget
	from the layout until QWidget::show() is called.

# ["foo", " bar", "baz"].index('bar')

profiling results
	operation on two lists
		list2 = [4, 5, 6]*10**5
		list1 = [1, 2, 3]*10**5
		%timeit from operator import add;map(add, list1, list2)
		: 10 loops, best of 3: 44.6 ms per loop
		%timeit from itertools import izip; [a + b for a, b in izip(list1, list2)]
		: 10 loops, best of 3: 71 ms per loop
		%timeit [a + b for a, b in zip(list1, list2)]
		: 10 loops, best of 3: 112 ms per loop
		%timeit from itertools import izip;[sum(x) for x in izip(list1, list2)]
		: 1 loops, best of 3: 139 ms per loop
		%timeit [sum(x) for x in zip(list1, list2)]
		: 1 loops, best of 3: 177 ms per loop

Random bytestring for auth in IPC
	key = bytes(random.getrandbits(8) for _ in range(8))

IPC
	from subprocess import check_output, call, CalledProcessError
	: Bring window to front
	def visibilityHandler(signum, frame):
		print 'Signal handler called with signal', signum

	if __name__ == '__main__':
		wid = None
		try:
			wid = check_output(['xdotool', 'search', '--class', 'piony.py'],
							universal_newlines=True)
		except CalledProcessError:
			signal(SIGUSR1, visibilityHandler)
		exit(call(['xdotool', 'windowactivate', wid]))

ipdb on exception
	from ipdb import launch_ipdb_on_exception
	with launch_ipdb_on_exception():
		[...]

import sys, ipdb, traceback

def info(type, value, tb):
    traceback.print_exception(type, value, tb)
    print
    ipdb.pm()

sys.excepthook = info
