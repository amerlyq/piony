>>> SETTINGS >>>

GENERAL
	2015-04-26 [X] Implement draft profiles '<krita...>.json'
	2015-04-27 [X] Implement general settings 'config.ini'
	[_] style.js or style.css
		: default style, if not specified one in <...>.json
		: colors, spacings, curveness, etc
	[_] keymap.json
		: general kbd/mse/wst keys to control menu


ARGUMENTS
	[_] Command line arguments support
		: https://docs.python.org/3/library/argparse.html
		: https://pythonhosted.org/kitchen/unicode-frustrations.html
		: https://docs.python.org/2/tutorial/introduction.html#tut-unicodestrings
		[_] Hide debug options
			http://stackoverflow.com/questions/11114589/creating-hidden-arguments-with-python-argparse
		Uniqueness
			http://stackoverflow.com/questions/23032514/argparse-disable-same-argument-occurences


CONFIG
	[_] Duplicate all arguments to config.ini
	[_] Merge all args to cfg before pass to Window
	2015-05-05 [$] instead of global var 'G_CONFIG_DEFAULT' use function
		:> def cfgDefaults(): return ((...))
		: more thread-safe, as it creates own copy of dictionary for each thread
	[_] Use G_CONFIG_DEFAULT as list of permitted options
		:> Check sections, then options in DEFAULT and corresponding section

	<Flags>
	[_] -c <path>: path to config.ini or STDIN


PROFILES   :>>> All syntax is yaml-compatible
	2015-04-23 [X] Basic profile support in json
	2015-04-29 [X] Port profile parser to yaml as less clumber
	2015-04-29 [$] ? Use rich input preparsing to construct valid json.
		:= using tuples for fixed order items and slices instead of dicts
		:= add quotes on items, which lack of it
		:> Yaml had satisfied requirements
	2015-04-27 [X] -i /{-/<path>/[...]/{...}}: input str or path for profile
	2015-04-29 [X] Instead of -i use positional parameters to combine slices
		:= ./piony.py -s 360 ./cfg/krita.json - "[...]" "{...}"
	[_] check that '-' used *only_once* through _all_ arguments
	[_] get 'name' from filename if not specified
	[_] own exceptions for parsing errors
	[_] replace inner buds format from dict to named tuples
		:: So I could use ring['segments] -> ring.segments
	2015-04-27 [X] Full format for each entry
	| it can be merged with Qt style file, written in CSS (QSS?)
		2015-04-24 [X] name
		2015-04-24 [X] action
		2015-04-26 [X] tooltip
		[_] type
	[_] Import directives to reuse parts from another files
	[_] try - except for budparser -- or server will crash on bad client args
	[_] Symbol? Way to replace choosen slices in current bud
	: {import: ./cfgs/krita.yml, ring: 2, segment: 3}
	| [k1,{import: ./cfgs/krita.yml}
	[_] Confidently determine if string is path or part of yaml
	|   |
	[_] Bud primitives
	| -      | slice from stdin
	| <file> | slice from file (search in pwd/, pwd/cfgs/, ~/.piony/, /etc/piony/)
	| [...]  | rings (one or several) for one slice. One button only: [k1]
	| {...}  | slices for one bud (complete format)
	[_] Rings format
	| [k1,k2,...]             | simple list of keys for 1-ring directly on cmdline
>	| [k1,(k2,nm2,tip2),...]  | fixed order properties (cmdline only)
	| [k1,{action: k1,*},...] | entry as dict with parameters
	| {segments:[k1...],*}    | ring with params, like style and initial rotation
	[_] Slices format
	| [[k1...],[m1...]...]       | short slice with entries for N rings
	| {rings: [[k1...]...],*}    | full format one slice with corners
	| {slices: [{rings:*}...],*} | full format multiple slices for one bud
	[_] Combinations
	| [...] [[...]]        | one-ring slice with short format slice
	| {rings:*} {slices:*} | full slice with full bud
	| <file1> <file2>      | buds from different files
	| - <file2> [...]      | different input sources
	[_] Errors
	| [k1,[m1...]...] | Mixed segments and rings in one slice
	[_] specify all slices separate file, and then insert transition links in action keys
		allows to combine several different slices on fly!
	[_] ... air-widgets, etc... -- need similar list to list in --input


INFO
	Dirty fast
	: http://martin-thoma.com/configuration-files-in-python/
	Species
		2015-04-23 [X] https://docs.python.org/3/library/configparser.html
		:Sum: use for settings, as it is good only for plain sections.
		2015-04-29 [$] http://www.voidspace.org.uk/python/configobj.html
		:Proc: superset to configparser
		:Cons: non-standard
		2015-04-29 [$] https://docs.python.org/3/library/shlex.html#module-shlex
		:Cons: only splits strings to lexems, as shell do. No more.
		:Sums: for custom parsers with sh syntaxes
		2015-04-29 [$] https://docs.python.org/3/library/json.html#module-json
		:Proc: standard, any amount of spaces between items
		:Cons: need quotes on each string key and value, clumber on cmdline
		2015-04-29 [X] http://pyyaml.org/wiki/PyYAMLDocumentation
		:Proc: allow plain text w/o quotes for items!
		:Cons: non-standard, for _unquoted_ keys, needs fixed delimiters with
			 : space for values like ': ' and '- '
		2015-04-29 [$] regular python files
		:	http://asvetlov.blogspot.com/2011/03/importconfig.html
		:Cons: can't prevent code from execution to use declarative syntax
		[_] https://docs.python.org/3/library/ast.html
		2015-04-29 [$] Flex&Bison: http://habrahabr.ru/post/141756/
		:Cons: unix only

	Use vars in .ini : Extended Interpolation
		https://wiki.python.org/moin/ConfigParserExamples
		http://www.blog.pythonlibrary.org/2013/10/25/python-101-an-intro-to-configparser/

